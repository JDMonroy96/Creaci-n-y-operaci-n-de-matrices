/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package matriz;

import java.awt.event.KeyEvent;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import matriz.Matriz;
/**
 *
 * @author Juan David Monroy
 */
public class GUI extends javax.swing.JFrame {
    Matriz clase = new Matriz();
    
    /** Creates new form GUI */
    public GUI() {
      
        int[][] matriz_B;
        initComponents();
        DefaultTableModel modelo = (DefaultTableModel) tabla_a.getModel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tamaño_filas_A = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tamaño_columnas_A = new javax.swing.JTextField();
        crear_A = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_a = new javax.swing.JTable();
        tamaño_filas_B = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tamaño_columnas_B = new javax.swing.JTextField();
        crear_B = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_C = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        boton_suma = new javax.swing.JButton();
        boton_resta = new javax.swing.JButton();
        boton_transpuesta_A = new javax.swing.JButton();
        boton_productopunto = new javax.swing.JButton();
        boton_multiplicacion = new javax.swing.JButton();
        boton_cuboA = new javax.swing.JButton();
        boton_transpuesta_B = new javax.swing.JButton();
        boton_cuboB = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla_B = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tamaño_filas_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamaño_filas_AActionPerformed(evt);
            }
        });
        tamaño_filas_A.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tamaño_filas_AKeyTyped(evt);
            }
        });

        jLabel1.setText("Ingrese la cantidad de filas");

        jLabel2.setText("Ingrese la cantidad de columnas");

        tamaño_columnas_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamaño_columnas_AActionPerformed(evt);
            }
        });
        tamaño_columnas_A.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tamaño_columnas_AKeyTyped(evt);
            }
        });

        crear_A.setText("Crear");
        crear_A.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crear_AMouseClicked(evt);
            }
        });

        tabla_a.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabla_a);

        tamaño_filas_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamaño_filas_BActionPerformed(evt);
            }
        });
        tamaño_filas_B.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tamaño_filas_BKeyTyped(evt);
            }
        });

        jLabel3.setText("Ingrese la cantidad de filas");

        jLabel4.setText("Ingrese la cantidad de columnas");

        tamaño_columnas_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamaño_columnas_BActionPerformed(evt);
            }
        });
        tamaño_columnas_B.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tamaño_columnas_BKeyTyped(evt);
            }
        });

        crear_B.setText("Crear");
        crear_B.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crear_BMouseClicked(evt);
            }
        });
        crear_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crear_BActionPerformed(evt);
            }
        });
        crear_B.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                crear_BKeyTyped(evt);
            }
        });

        tabla_C.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tabla_C);

        jLabel5.setText("Campos de la Matriz A:");

        jLabel6.setText("Campos de la Matriz B:");

        boton_suma.setText("A+B");
        boton_suma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton_sumaMouseClicked(evt);
            }
        });

        boton_resta.setText("A-B");
        boton_resta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                boton_restaMousePressed(evt);
            }
        });

        boton_transpuesta_A.setText("(A)^T");
        boton_transpuesta_A.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton_transpuesta_AMouseClicked(evt);
            }
        });
        boton_transpuesta_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_transpuesta_AActionPerformed(evt);
            }
        });

        boton_productopunto.setText("A*B");
        boton_productopunto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                boton_productopuntoMousePressed(evt);
            }
        });
        boton_productopunto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                boton_productopuntoKeyPressed(evt);
            }
        });

        boton_multiplicacion.setText("AxB");
        boton_multiplicacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton_multiplicacionMouseClicked(evt);
            }
        });
        boton_multiplicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_multiplicacionActionPerformed(evt);
            }
        });

        boton_cuboA.setText("(A)^3");
        boton_cuboA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                boton_cuboAMousePressed(evt);
            }
        });
        boton_cuboA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                boton_cuboAKeyPressed(evt);
            }
        });

        boton_transpuesta_B.setText("(B)^T");
        boton_transpuesta_B.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton_transpuesta_BMouseClicked(evt);
            }
        });
        boton_transpuesta_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_transpuesta_BActionPerformed(evt);
            }
        });

        boton_cuboB.setText("(B)^3");
        boton_cuboB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton_cuboBMouseClicked(evt);
            }
        });

        tabla_B.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tabla_B);

        jLabel7.setText("Matriz Resultado C:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tamaño_columnas_A, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tamaño_filas_A, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(crear_A))
                    .addComponent(jLabel6)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tamaño_columnas_B, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tamaño_filas_B, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(crear_B)))
                .addGap(124, 124, 124)
                .addComponent(jLabel7)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(95, 95, 95)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(29, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(boton_cuboA)
                            .addComponent(boton_suma))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(boton_transpuesta_A)
                            .addComponent(boton_resta))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(boton_productopunto, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(boton_cuboB, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(boton_multiplicacion)
                            .addComponent(boton_transpuesta_B))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(173, 173, 173))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(crear_A))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tamaño_filas_A, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(tamaño_columnas_A, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tamaño_filas_B, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)
                                    .addComponent(boton_suma)
                                    .addComponent(boton_resta)
                                    .addComponent(boton_productopunto)
                                    .addComponent(boton_multiplicacion))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(tamaño_columnas_B, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(crear_B))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boton_cuboA)
                    .addComponent(boton_cuboB)
                    .addComponent(boton_transpuesta_A)
                    .addComponent(boton_transpuesta_B))
                .addGap(3, 3, 3)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tamaño_filas_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tamaño_filas_AActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tamaño_filas_AActionPerformed

    private void tamaño_filas_AKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tamaño_filas_AKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_tamaño_filas_AKeyTyped

    private void tamaño_columnas_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tamaño_columnas_AActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tamaño_columnas_AActionPerformed

    private void tamaño_columnas_AKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tamaño_columnas_AKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_tamaño_columnas_AKeyTyped

    private void crear_AMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crear_AMouseClicked
       
        if (tamaño_filas_A.getText().equals("")|| tamaño_columnas_A.getText().equals(""))  {   
            JOptionPane.showMessageDialog(null, "POR FAVOR INGRESE UN NUMERO ANTES DE INICIAR");
        } else{
            //Se le pregunta al usuario si desea el ingreso aleatorio o manual.
              int opcion = JOptionPane.showConfirmDialog(this, "¿Desea que los números se agreguen de forma aleatoria?");
              int filas_A = Integer.parseInt(tamaño_filas_A.getText());
              int columnas_A = Integer.parseInt(tamaño_columnas_A.getText());
             clase.matriz = new int[filas_A][columnas_A];
             clase.matriz_A = new int[filas_A][columnas_A];
            //Condicional que  indica que si se presiona el "Si" se recorra la matriz y se llenen filas y columnas con valores aleatorios
     switch(opcion){
          
         case 0:
           clase.crearMatrizAleatorio(filas_A, columnas_A); 
          DefaultTableModel modelo = (DefaultTableModel) tabla_a.getModel();
             modelo.setRowCount(0);
             modelo.setColumnCount(0);
             modelo.setRowCount(filas_A);//Valores de las filas de A
             modelo.setColumnCount(columnas_A);//Valores de las columnas de A
             //Ciclo que recorre la matriz Matriz y le asigna los valores de esta a atriz_A
               for (int i = 0; i < filas_A; i++) {
            for (int j = 0;j  < columnas_A; j++) {
              clase.matriz_A[i][j]= clase.matriz[i][j];
              modelo.setValueAt(clase.matriz_A[i][j], i, j);//Añade los valores de la matriz a la fila y columna de indice i y j
                
            }
            
        }    
         break;
         case 1:
             clase.crearMatriz(filas_A, columnas_A);
              modelo = (DefaultTableModel) tabla_a.getModel();
              modelo.setRowCount(0);
              modelo.setColumnCount(0);
              modelo.setRowCount(filas_A);
              modelo.setColumnCount(columnas_A);
               for (int i = 0; i < filas_A; i++) {
            for (int j = 0;j  < columnas_A; j++) {
              clase.matriz_A[i][j]= clase.matriz[i][j];
              modelo.setValueAt(clase.matriz_A[i][j], i, j);
              }  
            }
         break;
         
         case 2:
              JOptionPane.showMessageDialog(this,"Volviendo al menu principal");
         break;
     }       
       
       }
    }//GEN-LAST:event_crear_AMouseClicked

    private void tamaño_filas_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tamaño_filas_BActionPerformed
    
                // TODO add your handling code here:
    }//GEN-LAST:event_tamaño_filas_BActionPerformed

    private void tamaño_filas_BKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tamaño_filas_BKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_tamaño_filas_BKeyTyped

    private void tamaño_columnas_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tamaño_columnas_BActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tamaño_columnas_BActionPerformed

    private void tamaño_columnas_BKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tamaño_columnas_BKeyTyped
         char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_tamaño_columnas_BKeyTyped

    private void crear_BMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crear_BMouseClicked
       
        if (tamaño_filas_B.getText().equals("")|| tamaño_columnas_B.getText().equals(""))  {   
            JOptionPane.showMessageDialog(null, "POR FAVOR INGRESE UN NUMERO ANTES DE INICIAR");
        } else{
            //Se le pregunta al usuario si desea el ingreso aleatorio o manual.
              int opcion = JOptionPane.showConfirmDialog(this, "¿Desea que los números se agreguen de forma aleatoria?");
              int filas_B = Integer.parseInt(tamaño_filas_B.getText());
              int columnas_B = Integer.parseInt(tamaño_columnas_B.getText());
               clase.matriz = new int[filas_B][columnas_B];
              clase.matriz_B = new int[filas_B][columnas_B];
            //Condicional que  indica que si se presiona el "Si" se recorra la matriz y se llenen filas y columnas con valores aleatorios
     if(filas_B >0 && columnas_B>0){
         switch(opcion){
         
         case 0:
             DefaultTableModel modelo = (DefaultTableModel) tabla_B.getModel();
              modelo.setRowCount(0);
             modelo.setColumnCount(0);
            clase.crearMatrizAleatorio(filas_B, columnas_B);
             modelo.setRowCount(filas_B);
             modelo.setColumnCount(columnas_B);
             clase.mostrarMatriz(clase.matriz,filas_B,columnas_B);
               for (int n = 0; n < filas_B; n++) {
            for (int m = 0;m  < columnas_B; m++) {
               clase.matriz_B[n][m]= clase.matriz[n][m];
               modelo.setValueAt(clase.matriz_B[n][m], n, m);
                
            }
            
        }             
         break;
         case 1:
               clase.crearMatriz(filas_B, columnas_B);
              modelo = (DefaultTableModel) tabla_B.getModel();
              modelo.setRowCount(0);
              modelo.setColumnCount(0);
              modelo.setRowCount(filas_B);
              modelo.setColumnCount(columnas_B);
             clase.mostrarMatriz(clase.matriz,filas_B,columnas_B);
               for (int i = 0; i < filas_B; i++) {
            for (int j = 0;j  < columnas_B; j++) {
              clase.matriz_B[i][j]= clase.matriz[i][j];
              modelo.setValueAt(clase.matriz_B[i][j], i, j);
              }  
            }    
         break;
         
         case 2:
              JOptionPane.showMessageDialog(this,"Volviendo al menu principal");
         break;
     }
     
     }else{
         JOptionPane.showMessageDialog(this, "Ingrese tamaños positivos para las filas o columnas de la matriz");
     }
     }
    }//GEN-LAST:event_crear_BMouseClicked

    private void crear_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crear_BActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_crear_BActionPerformed

    private void crear_BKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_crear_BKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_crear_BKeyTyped

    private void boton_sumaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_sumaMouseClicked
           try{
              DefaultTableModel modelo; 
              modelo = (DefaultTableModel) tabla_C.getModel();
              modelo.setRowCount(0);
              modelo.setColumnCount(0);
             //Variables que toman el valor del tamaño de las filas y ccolumnas de cada tabla
              int indice_filas_a = tabla_a.getRowCount();
              int indice_columnas_a = tabla_a.getColumnCount();
              int indice_filas_b = tabla_B.getRowCount();
              int indice_columnas_b = tabla_B.getColumnCount();
              modelo.setRowCount(indice_filas_a);
              modelo.setColumnCount(indice_columnas_a);
            //se le asignan estos valores a los tamaños de la matriz_A y matriz_B
             clase.matriz = new int[indice_filas_a][indice_columnas_b];
              clase.matriz_A = new int[indice_filas_a][indice_columnas_a];
              clase.matriz_B = new int[indice_filas_b][indice_columnas_b];
            //ciclo que toma los valores presentes en la tabla_A
              for (int i = 0; i < indice_filas_a; i++) {
            for (int j = 0;j  < indice_columnas_a; j++) {
                String valor = tabla_a.getValueAt(i, j).toString();//Se hace la conversión de Object a String
                clase.matriz_A[i][j] =Integer.parseInt(valor);//Se hace la conversión de String a Integer
              }  
            }
              //ciclo que toma los valores presentes en la tabla_B
              for (int i = 0; i < indice_filas_b; i++) {
            for (int j = 0;j  < indice_columnas_b; j++) {
                String valor = tabla_B.getValueAt(i, j).toString();//Se hace la conversión de Object a String
                clase.matriz_B[i][j] =Integer.parseInt(valor);//Se hace la conversión de String a Integer
               
              }  
            }
            clase.sumasMatriz(clase.matriz_A,clase.matriz_B);
            //Ciclo que pone la matriz en el jTable
             for (int i = 0; i < indice_filas_b; i++) {
            for (int j = 0;j  < indice_columnas_b; j++) {
                clase.matriz[i][j]= clase.matriz_suma[i][j];
                modelo.setValueAt(clase.matriz_suma[i][j], i, j);
              }  
            }
          }catch(ArrayIndexOutOfBoundsException e){
              JOptionPane.showMessageDialog(null,"Alguna de las matrices está vacía");
          }
    }//GEN-LAST:event_boton_sumaMouseClicked

    private void boton_transpuesta_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_transpuesta_AActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boton_transpuesta_AActionPerformed

    private void boton_multiplicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_multiplicacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boton_multiplicacionActionPerformed

    private void boton_transpuesta_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_transpuesta_BActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boton_transpuesta_BActionPerformed

    private void boton_restaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_restaMousePressed
        try{
        DefaultTableModel modelo; 
              modelo = (DefaultTableModel) tabla_C.getModel();
              modelo.setRowCount(0);
              modelo.setColumnCount(0);
             //Variables que toman el valor del tamaño de las filas y ccolumnas de cada tabla
              int indice_filas_a = tabla_a.getRowCount();
              int indice_columnas_a = tabla_a.getColumnCount();
              int indice_filas_b = tabla_B.getRowCount();
              int indice_columnas_b = tabla_B.getColumnCount();
              modelo.setRowCount(indice_filas_a);
              modelo.setColumnCount(indice_columnas_a);
            //se le asignan estos valores a los tamaños de la matriz_A y matriz_B
              clase.matriz = new int[indice_filas_a][indice_columnas_b];
              clase.matriz_A = new int[indice_filas_a][indice_columnas_a];
              clase.matriz_B = new int[indice_filas_b][indice_columnas_b];
            //ciclo que toma los valores presentes en la tabla_A
              for (int i = 0; i < indice_filas_a; i++) {
            for (int j = 0;j  < indice_columnas_a; j++) {
                String valor = tabla_a.getValueAt(i, j).toString();//Se hace la conversión de Object a String
                clase.matriz_A[i][j] =Integer.parseInt(valor);//Se hace la conversión de String a Integer
               
              }  
            }
              //ciclo que toma los valores presentes en la tabla_B
              for (int i = 0; i < indice_filas_b; i++) {
            for (int j = 0;j  < indice_columnas_b; j++) {
                String valor = tabla_B.getValueAt(i, j).toString();//Se hace la conversión de Object a String
                clase.matriz_B[i][j] =Integer.parseInt(valor);//Se hace la conversión de String a Integer
               
              }  
            }
            clase.restasMatriz(clase.matriz_A,clase.matriz_B);
            //Ciclo que pone la matriz en el jTable
             for (int i = 0; i < indice_filas_b; i++) {
            for (int j = 0;j  < indice_columnas_b; j++) {
                clase.matriz[i][j]= clase.matriz_resta[i][j];
                modelo.setValueAt(clase.matriz_resta[i][j], i, j);
              } 
            }
            }catch(ArrayIndexOutOfBoundsException e){
              JOptionPane.showMessageDialog(null,"Alguna de las matrices está vacía");
          }
    }//GEN-LAST:event_boton_restaMousePressed

    private void boton_productopuntoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_boton_productopuntoKeyPressed
         
    }//GEN-LAST:event_boton_productopuntoKeyPressed

    private void boton_cuboAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_boton_cuboAKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_boton_cuboAKeyPressed

    private void boton_productopuntoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_productopuntoMousePressed
             try{
              DefaultTableModel modelo; 
              modelo = (DefaultTableModel) tabla_C.getModel();
              modelo.setRowCount(0);
              modelo.setColumnCount(0);
             //Variables que toman el valor del tamaño de las filas y ccolumnas de cada tabla
              int indice_filas_a = tabla_a.getRowCount();
              int indice_columnas_a = tabla_a.getColumnCount();
              int indice_filas_b = tabla_B.getRowCount();
              int indice_columnas_b = tabla_B.getColumnCount();
              modelo.setRowCount(indice_filas_a);
              modelo.setColumnCount(indice_columnas_a);
            //se le asignan estos valores a los tamaños de la matriz_A y matriz_B
              clase.matriz = new int[indice_filas_a][indice_columnas_b];
              clase.matriz_A = new int[indice_filas_a][indice_columnas_a];
              clase.matriz_B = new int[indice_filas_b][indice_columnas_b];
            //ciclo que toma los valores presentes en la tabla_A
              for (int i = 0; i < indice_filas_a; i++) {
            for (int j = 0;j  < indice_columnas_a; j++) {
                String valor = tabla_a.getValueAt(i, j).toString();//Se hace la conversión de Object a String
                clase.matriz_A[i][j] =Integer.parseInt(valor);//Se hace la conversión de String a Integer
              }  
            }
              //ciclo que toma los valores presentes en la tabla_B
              for (int i = 0; i < indice_filas_b; i++) {
            for (int j = 0;j  < indice_columnas_b; j++) {
                String valor = tabla_B.getValueAt(i, j).toString();//Se hace la conversión de Object a String
                clase.matriz_B[i][j] =Integer.parseInt(valor);//Se hace la conversión de String a Integer
              }  
            }
            clase.productoPuntoMatriz(clase.matriz_A,clase.matriz_B);
            //Ciclo que pone la matriz en el jTable
             for (int i = 0; i < indice_filas_b; i++) {
            for (int j = 0;j  < indice_columnas_b; j++) {
                clase.matriz[i][j]= clase.matriz_producto[i][j];
                modelo.setValueAt(clase.matriz_producto[i][j], i, j);
              }  
            }
              }catch(ArrayIndexOutOfBoundsException e){
              JOptionPane.showMessageDialog(null,"Alguna de las matrices está vacía");
              }
    }//GEN-LAST:event_boton_productopuntoMousePressed

    private void boton_cuboAMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_cuboAMousePressed
              try{
              DefaultTableModel modelo; 
              modelo = (DefaultTableModel) tabla_C.getModel();
              modelo.setRowCount(0);
              modelo.setColumnCount(0);
             //Variables que toman el valor del tamaño de las filas y ccolumnas de cada tabla
              int indice_filas_a = tabla_a.getRowCount();
              int indice_columnas_a = tabla_a.getColumnCount();
              modelo.setRowCount(indice_filas_a);
              modelo.setColumnCount(indice_columnas_a);
            //se le asignan estos valores a los tamaños de la matriz_A y matriz_B
              clase.matriz_cubo = new int[indice_filas_a][indice_columnas_a];
              clase.matriz_A = new int[indice_filas_a][indice_columnas_a];
            //ciclo que toma los valores presentes en la tabla_A
              for (int i = 0; i < indice_filas_a; i++) {
            for (int j = 0;j  < indice_columnas_a; j++) {
                String valor = tabla_a.getValueAt(i, j).toString();//Se hace la conversión de Object a String
                clase.matriz_A[i][j] =Integer.parseInt(valor);//Se hace la conversión de String a Integer
              }  
            }
            clase.cuboMatriz(clase.matriz_A,indice_filas_a,indice_columnas_a);
            //Ciclo que pone la matriz en el jTable
             for (int i = 0; i < indice_filas_a; i++) {
            for (int j = 0;j  < indice_columnas_a; j++) {
                clase.matriz[i][j]= clase.matriz_cubo[i][j];
                modelo.setValueAt(clase.matriz[i][j], i, j);
              }  
            }
               }catch(ArrayIndexOutOfBoundsException e){
              JOptionPane.showMessageDialog(null,"La matriz está como vacía oís?");
              }
    }//GEN-LAST:event_boton_cuboAMousePressed

    private void boton_cuboBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_cuboBMouseClicked
         try{
            DefaultTableModel modelo; 
              modelo = (DefaultTableModel) tabla_C.getModel();
              modelo.setRowCount(0);
              modelo.setColumnCount(0);
             //Variables que toman el valor del tamaño de las filas y ccolumnas de cada tabla
              int indice_filas_b = tabla_B.getRowCount();
              int indice_columnas_b = tabla_B.getColumnCount();
              modelo.setRowCount(indice_filas_b);
              modelo.setColumnCount(indice_columnas_b);
            //se le asignan estos valores a los tamaños de la matriz_A y matriz_B
              clase.matriz_cubo = new int[indice_filas_b][indice_columnas_b];
              clase.matriz_B = new int[indice_filas_b][indice_columnas_b];
            //ciclo que toma los valores presentes en la tabla_A
              for (int i = 0; i < indice_filas_b; i++) {
            for (int j = 0;j  < indice_columnas_b; j++) {
                String valor = tabla_B.getValueAt(i, j).toString();//Se hace la conversión de Object a String
                clase.matriz_B[i][j] =Integer.parseInt(valor);//Se hace la conversión de String a Integer
              }  
            }
            clase.cuboMatriz(clase.matriz_B,indice_filas_b,indice_columnas_b);
            //Ciclo que pone la matriz en el jTable
             for (int i = 0; i < indice_filas_b; i++) {
            for (int j = 0;j  < indice_columnas_b; j++) {
                clase.matriz[i][j]= clase.matriz_cubo[i][j];
                modelo.setValueAt(clase.matriz[i][j], i, j);
              }  
            }
           }catch(ArrayIndexOutOfBoundsException e){
              JOptionPane.showMessageDialog(null,"Alguna de las matrices está vacía");
              }
    }//GEN-LAST:event_boton_cuboBMouseClicked

    private void boton_transpuesta_AMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_transpuesta_AMouseClicked
            try{
              DefaultTableModel modelo; 
              modelo = (DefaultTableModel) tabla_C.getModel();
              modelo.setRowCount(0);
              modelo.setColumnCount(0);
             //Variables que toman el valor del tamaño de las filas y ccolumnas de cada tabla
              int indice_filas_a = tabla_a.getRowCount();
              int indice_columnas_a = tabla_a.getColumnCount();
              modelo.setRowCount(indice_columnas_a); //se inicializan las filas con el número total de columnas
              modelo.setColumnCount(indice_filas_a);//se inicializan las columnas con el número total de filas
            //se le asignan estos valores a los tamaños de la matriz_A y matriz_B
              clase.matriz_transpuesta = new int[indice_filas_a][indice_columnas_a];
              clase.matriz_A = new int[indice_filas_a][indice_columnas_a];
            //ciclo que toma los valores presentes en la tabla_A
              for (int i = 0; i < indice_filas_a; i++) {
            for (int j = 0;j  < indice_columnas_a; j++) {
                String valor = tabla_a.getValueAt(i, j).toString();//Se hace la conversión de Object a String
                clase.matriz_A[i][j] =Integer.parseInt(valor);//Se hace la conversión de String a Integer
              }  
            }
            clase.transpuestaMatriz(clase.matriz_A,indice_filas_a,indice_columnas_a);
            //Ciclo que pone la matriz en el jTable
             for (int i = 0; i < indice_columnas_a; i++) {
            for (int j = 0;j  < indice_filas_a; j++) {
                clase.matriz[j][i]= clase.matriz_transpuesta[i][j];
                modelo.setValueAt(clase.matriz[j][i], i, j);
              }  
            }
              } catch(ArrayIndexOutOfBoundsException e){
              JOptionPane.showMessageDialog(null,"La matriz está como vacía oís?");
              }
    }//GEN-LAST:event_boton_transpuesta_AMouseClicked

    private void boton_transpuesta_BMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_transpuesta_BMouseClicked
          try{
              DefaultTableModel modelo; 
              modelo = (DefaultTableModel) tabla_C.getModel();
              modelo.setRowCount(0);
              modelo.setColumnCount(0);
             //Variables que toman el valor del tamaño de las filas y ccolumnas de cada tabla
              int indice_filas_b = tabla_B.getRowCount();
              int indice_columnas_b = tabla_B.getColumnCount();
              modelo.setRowCount(indice_columnas_b); //se inicializan las filas con el número total de columnas
              modelo.setColumnCount(indice_filas_b);//se inicializan las columnas con el número total de filas
            //se le asignan estos valores a los tamaños de la matriz_A y matriz_B
              clase.matriz_transpuesta = new int[indice_filas_b][indice_columnas_b];
              clase.matriz_B = new int[indice_filas_b][indice_columnas_b];
            //ciclo que toma los valores presentes en la tabla_A
              for (int i = 0; i < indice_filas_b; i++) {
            for (int j = 0;j  < indice_columnas_b; j++) {
                String valor = tabla_B.getValueAt(i, j).toString();//Se hace la conversión de Object a String
                clase.matriz_B[i][j] =Integer.parseInt(valor);//Se hace la conversión de String a Integer
              }  
            }
            clase.transpuestaMatriz(clase.matriz_B,indice_filas_b,indice_columnas_b);
            //Ciclo que pone la matriz en el jTable
             for (int i = 0; i < indice_columnas_b; i++) {
            for (int j = 0;j  < indice_filas_b; j++) {
                clase.matriz[j][i]= clase.matriz_transpuesta[i][j];
                modelo.setValueAt(clase.matriz[j][i], i, j);
              }  
            }
             } catch(ArrayIndexOutOfBoundsException e){
              JOptionPane.showMessageDialog(null,"La matriz está como vacía oís?");
              }
    }//GEN-LAST:event_boton_transpuesta_BMouseClicked

    private void boton_multiplicacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_multiplicacionMouseClicked
       try{
        DefaultTableModel modelo; 
              modelo = (DefaultTableModel) tabla_C.getModel();
              modelo.setRowCount(0);
              modelo.setColumnCount(0);
             //Variables que toman el valor del tamaño de las filas y ccolumnas de cada tabla
              int indice_filas_a = tabla_a.getRowCount();
              int indice_columnas_a = tabla_a.getColumnCount();
              int indice_filas_b = tabla_B.getRowCount();
              int indice_columnas_b = tabla_B.getColumnCount();
              modelo.setRowCount(indice_filas_a); //se inicializan las filas con el número total de filas de A
              modelo.setColumnCount(indice_columnas_a);//se inicializan las columnas con el número total de columnas de B
            //se le asignan estos valores a los tamaños de la matriz_A y matriz_B
              clase.matriz = new int[indice_filas_a][indice_columnas_b];
              clase.matriz_A = new int[indice_filas_a][indice_columnas_a];
              clase.matriz_B = new int[indice_filas_b][indice_columnas_b];
            //ciclo que toma los valores presentes en la tabla_A
              for (int i = 0; i < indice_filas_a; i++) {
            for (int j = 0;j  < indice_columnas_a; j++) {
                 
                
                String valor = tabla_a.getValueAt(i, j).toString();//Se hace la conversión de Object a String
                clase.matriz_A[i][j] =Integer.parseInt(valor);//Se hace la conversión de String a Integer
               
              } 
            }
              //ciclo que toma los valores presentes en la tabla_B
              for (int i = 0; i < indice_filas_a; i++) {
            for (int j = 0;j  < indice_columnas_b; j++) {
                String valor = tabla_B.getValueAt(i, j).toString();//Se hace la conversión de Object a String
                clase.matriz_B[i][j] =Integer.parseInt(valor);//Se hace la conversión de String a Integer
               
              }  
            }
            clase.multiplicacionMatriz(clase.matriz_A,clase.matriz_B);
            //Ciclo que pone la matriz en el jTable
             for (int i = 0; i < indice_filas_a; i++) {
            for (int j = 0;j  < indice_columnas_b; j++) {
                clase.matriz[i][j]= clase.matriz_multiplicacion[i][j];
                modelo.setValueAt(clase.matriz_multiplicacion[i][j], i, j);
              } 
            }
            } catch(ArrayIndexOutOfBoundsException e){
              JOptionPane.showMessageDialog(null,"Alguna de las matrices está vacía o se desbordó");
          }  catch(NullPointerException e){
              JOptionPane.showMessageDialog(null,"Se intento acceder a una posición ");
          }
            
    }//GEN-LAST:event_boton_multiplicacionMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton_cuboA;
    private javax.swing.JButton boton_cuboB;
    private javax.swing.JButton boton_multiplicacion;
    private javax.swing.JButton boton_productopunto;
    private javax.swing.JButton boton_resta;
    private javax.swing.JButton boton_suma;
    private javax.swing.JButton boton_transpuesta_A;
    private javax.swing.JButton boton_transpuesta_B;
    private javax.swing.JButton crear_A;
    private javax.swing.JButton crear_B;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tabla_B;
    private javax.swing.JTable tabla_C;
    private javax.swing.JTable tabla_a;
    private javax.swing.JTextField tamaño_columnas_A;
    private javax.swing.JTextField tamaño_columnas_B;
    private javax.swing.JTextField tamaño_filas_A;
    private javax.swing.JTextField tamaño_filas_B;
    // End of variables declaration//GEN-END:variables

}
